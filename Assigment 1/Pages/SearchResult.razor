@page "/SearchResult"
@page "/SearchResult/{Id}" 
<h3>SearchResult</h3>


@using Assigment_1.Data
@using Models
@inject IAdultService AdultService
@inject NavigationManager NavigationManager;

<h1>Adults List</h1>

@if (AdultsSearched == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>FirstName</th>
            <th>LastName</th>
            <th>HairColor</th>
            <th>EyeColor</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
            <th>JobTitle</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var adult in AdultsSearched)
        {
            <tr @onclick="@(() => NavigateToComponent(adult))">
              
                <td>@adult.FirstName</td>
                <td>@adult.LastName</td>
                <td>@adult.HairColor</td>
                <td>@adult.EyeColor</td>
                <td>@adult.Age</td>
                <td>@adult.Weight</td>
                <td>@adult.Height</td>
                <td>@adult.Sex</td>
                <td>@adult.JobTitle.JobTitle</td>
            </tr>
        }
        </tbody>
    </table>
}



@code
{
    [Parameter]
    public string Id { get; set; }
    public IList<Adult> Adults { get; set; }
    public IList<Adult> AdultsSearched = new List<Adult>();

    protected override async Task OnInitializedAsync()
    {
        Adults = AdultService.AdultsList;
        foreach (Adult adult in Adults)
        {
            if (adult.FirstName.Contains(Id) || adult.LastName.Contains(Id))
            {
                AdultsSearched.Add(adult);
            }
        }
    }

    private void NavigateToComponent(Adult p)
    {
        NavigationManager.NavigateTo("AdultPage/" + p.Id);
    }
}